generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  created_at        Int?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               Int               @id @default(autoincrement())
  name             String?
  password         String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  exerciseSessions ExerciseSession[]
  Program          Program[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ExerciseSession {
  sid       Int        @id @default(autoincrement())
  date      DateTime   @default(now()) @db.Timestamptz(6)
  userId    Int
  exercises Exercise[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Exercise {
  id        Int             @id @default(autoincrement())
  name      String
  sessionId Int
  session   ExerciseSession @relation(fields: [sessionId], references: [sid], onDelete: Cascade)
  sets      Set[]

  @@unique([sessionId, name])
}

model Set {
  id         Int      @id @default(autoincrement())
  setNumber  Int
  reps       Int
  weight     Decimal  @db.Decimal(6, 2)
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([exerciseId, setNumber])
}

model Program {
  programId       Int              @id @default(autoincrement())
  userId          Int
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  programName     String
  splitLength     Int
  programSessions ProgramSession[]

  @@unique([userId, programName])
}

model ProgramSession {
  id          Int          @id @default(autoincrement())
  programId   Int
  program     Program      @relation(fields: [programId], references: [programId], onDelete: Cascade)
  splitIndex  Int
  name        String
  programSets ProgramSet[]

  @@unique([programId, splitIndex])
}

model ProgramSet {
  id               Int            @id @default(autoincrement())
  programSessionId Int
  programSession   ProgramSession @relation(fields: [programSessionId], references: [id], onDelete: Cascade)
  setIndex         Int
  exerciseIndex    Int
  exerciseName     String

  @@unique([programSessionId, setIndex, exerciseIndex])
  @@unique([programSessionId, setIndex, exerciseName])
}
